import tester.*; 
import javalib.funworld.*; 
import javalib.worldimages.*;  
import java.awt.Color;
import java.util.Random;

abstract class Fish {
  int x;
  int y;
  int size;
  int speed;

  Color color;

  Fish(int x, int y, int size, int speed, Color color) {
    this.x = x;
    this.y = y;
    this.size = size;
    this.speed = speed;

    this.color = color;
    
  }

  abstract Fish move(String direction);    

  WorldImage draw() {
      return new EllipseImage(this.size, this.size, OutlineMode.SOLID, this.color);
  }

  boolean canEat(Fish other) {
      int distance = (int) Math.sqrt(Math.pow(this.x - other.x, 2) + Math.pow(this.y - other.y, 2));
    
      return this.size > other.size && distance < this.size / 2;
  }

  boolean hasBeenEatenBy(Fish other) {
    return other.canEat(this);
  }

}

 class playerFish extends Fish {
  playerFish(int x, int y, int size, int speed, Color color) {
    super(x, y, size, speed, color);
    
  }

  @Override
  playerFish move(String direction) {
    if (direction.equals("up")) this.y -= this.speed;
    else if (direction.equals("down")) this.y += this.speed;
    else if (direction.equals("left")) this.x -= this.speed;
    else if (direction.equals("right")) this.x += this.speed;

    if (this.x < 0) this.x = 0;
    if (this.x > 500) this.x = 500;
    if (this.y < 0) this.y = 0;
    if (this.y > 500) this.y = 500;

    return this;
  }

  playerFish grow(int food) {
    this.size += food;
    return this;
  }
  
}

class backgroundFish extends Fish {
  backgroundFish(int x, int y, int size, int speed, Color color) {
    super(x, y, size, speed, color);
    
  }

  @Override
  backgroundFish move(String direction) {
    if (direction.equals("up")) this.y -= this.speed;
    else if (direction.equals("down")) this.y += this.speed;
    else if (direction.equals("left")) this.x -= this.speed;
    else if (direction.equals("right")) this.x += this.speed;

    if (this.x < 0) this.x = 0;
    if (this.x > 500) this.x = 500;
    if (this.y < 0) this.y = 0;
    if (this.y > 500) this.y = 500;

    return this;
  }
}

interface ILoFish {
  ILoFish moveAll();
  ILoFish eat(playerFish player);
  int getMaxSize();
  WorldScene drawAll(WorldScene scene);
}

class MtLoFish implements ILoFish {
  MtLoFish() {}

  public ILoFish moveAll() {
    return this;
  }

  public ILoFish eat(playerFish player) {
    return this;
  }

  public int getMaxSize() {
    return 0;
  }

  public WorldScene drawAll(WorldScene scene) {
    return scene;
  }
  
}

class ConsLoFish implements ILoFish {
  Fish first;
  ILoFish rest;

  ConsLoFish(Fish first, ILoFish rest) {
    this.first = first;
    this.rest = rest;
  }

  public ILoFish moveAll() {
    return new ConsLoFish(this.first.move("random"), this.rest.moveAll());
  }

  public ILoFish eat(playerFish player) {
    if (player.canEat(this.first)) {
      player.grow(this.first.size);
      return this.rest.eat(player);
      
    } else if (player.hasBeenEatenBy(this.first)) {
      player.size = 0;
      return this.rest;
    } else {
        return new ConsLoFish(this.first, this.rest.eat(player));
    }
  }

  public int getMaxSize() {
    return Math.max(this.first.size, this.rest.getMaxSize());
  }

  public WorldScene drawAll(WorldScene scene) {
    scene.placeImageXY(this.first.draw(), this.first.x, this.first.y);
    return this.rest.drawAll(scene);
  }
}

 class pondWorld extends World {
   playerFish player;
   ILoFish fishList;
   int tickCount;

   pondWorld(playerFish player, ILoFish fishList) {
     this.player = player;
     this.fishList = fishList;
     this.tickCount = 0;
   }

   public WorldScene makeScene() {
     WorldScene scene = new WorldScene(500, 500);

     scene.placeImageXY(this.player.draw(), this.player.x, this.player.y);
     return this.fishList.drawAll(scene);
   }


   public pondWorld onKeyEvent(String key) {
     
     if (key.equals("up")) {
       this.player.move("up");
     }
     else if (key.equals("down")) {
       this.player.move("down");
     }
     else if (key.equals("left")) {
       this.player.move("left");
     }
     else if (key.equals("right")) {
       this.player.move("right");
     }

     return this;
     
   }

   public World onTick() {
     this.tickCount++;

     this.fishList = this.fishList.moveAll();
     this.fishList = this.fishList.eat(this.player);

     if (this.player.size == 0) {
       return (pondWorld) this.endOfWorld("You have been eaten");
     }

     if (this.player.size > this.fishList.getMaxSize()) {
       return (pondWorld) this.endOfWorld("You are the largest fish!");
     }

     if (this.tickCount % 100 == 0) {
       this.fishList = this.addNewFish();
     }
     
     return this;
     
   }

   ILoFish addNewFish() {
     Random rand = new Random();
     int x = rand.nextInt(500);
     int y = rand.nextInt(500);

     int size = rand.nextInt(10) + 1;
     int speed = rand.nextInt(3) + 1;

     return new ConsLoFish(new backgroundFish(x, y, size, speed, Color.RED), this.fishList);
       
   }
   
   public pondWorld endOfWorld(String message) {
       this.endOfWorld = new endOfWorld(true, new OverlayImages(this.makeScene(), new TextImage(message, 32, Color.RED)));
       return this;
   }

class ExamplesMyWorldProgram {
  boolean testBigBang(Tester t) {
    playerFish player = new playerFish(250, 250, 20, 5, Color.BLUE);
    ILoFish fishList = new ConsLoFish(new backgroundFish(100, 100, 10, 2, Color.RED), new MtLoFish());
    pondWorld world = new pondWorld(player, fishList);
       
    return world.bigBang(500, 500, 0.1);
       
     }
   }
 }
